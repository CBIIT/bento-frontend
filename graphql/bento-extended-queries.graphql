type GroupCount {
    group: String
    subjects: Int
}

type SubjectOverview {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    study_short_description: String
    study_info: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    tumor_grade: String
    er_status: String
    pr_status: String
    chemotherapy: String
    endocrine_therapy: String
    menopause_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
    files: [file]
    samples: [String]
    lab_procedures: [String]
}

type SubjectInfo {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type FileInfo {
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type FileDetail {
    study_code: String
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ProgramInfo {
    program_acronym: String
    program_id: String
    program_name: String
    start_date: String
    end_date: String
    pubmed_id: String
    num_studies: Int
    num_subjects: Int
}

type StudyInfo {
    study_acronym: String
    study_name: String
    study_full_description: String
    study_type: String
    study_info: String
    num_subjects: Int
}

type ProgramDetail {
    program_acronym: String
    program_id: String
    program_name: String
    program_full_description: String
    institution_name: String
    program_external_url: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    disease_subtypes: [String]
    studies: [StudyInfo]
    diagnoses: [GroupCount]
}

type SubjectDetail {
    subject_id: String
    program_acronym: String
    program_id: String
    study_acronym: String
    study_name: String
    gender: String
    race: String
    ethnicity: String
    age_at_index: Int
    menopause_status: String
    vital_status: String
    cause_of_death: String
    disease_type: String
    disease_subtype: String
    tumor_grade: String
    tumor_largest_dimension_diameter: Float
    er_status: String
    pr_status: String
    nuclear_grade: String
    recurrence_score: Int
    primary_surgical_procedure: String
    chemotherapy_regimen_group: String
    chemotherapy_regimen: String
    endocrine_therapy_type: String
    dfs_event_indicator: String
    recurrence_free_indicator: String
    distant_recurrence_indicator: String
    dfs_event_type: String
    first_recurrence_type: String
    days_to_progression: Int
    days_to_recurrence: Int
    test_name: String
    files: [FileInfo]
    samples: [sample]
    num_samples: Int
    num_lab_procedures: Int
}

type ArmInfo {
    arm: String
    size: Int
    caseSize: Int
}

type ProgramArms {
    program: String
    caseSize: Int
    children: [ArmInfo]
}

type ArmFile {
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ArmDetail {
    study_acronym: String
    study_name: String
    study_type: String
    study_full_description: String
    study_info: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    diagnoses: [GroupCount]
    files: [ArmFile]
}

type SampleOverview {
    sample_id: String
    subject_id: String
    program: String
    arm: String
    diagnosis: String
    tissue_type: String
    tissue_composition: String
    sample_anatomic_site: String
    sample_procurement_method: String
    platform: String
    files: [String]
    program_id: String
}

type FileOverview {
    file_id: String
    file_name: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    program: String
    arm: String
    subject_id: String
    sample_id: String
    diagnosis: String
    program_id: String
}

type SubjectOverview2 {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    tumor_grade: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type SearchResult {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubjects: Int
    numberOfSamples: Int
    numberOfLabProcedures: Int
    numberOfFiles: Int
    subjectIds: [String]
    sampleIds: [String]
    fileIds: [String]
    firstPage: [SubjectOverview2]
}

type GroupList {
    group: String
    subjects: [String]
}

type IdsLists {
    subjectIds: [String]
    sampleIds: [String]
    fileIds: [String]
    fileNames: [String]
}

type NodeCounts {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubjects: Int
    numberOfSamples: Int
    numberOfLabProcedures: Int
    numberOfFiles: Int
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '1.3.0'")

    "Simple counts"
    numberOfPrograms: Int @cypher(statement: "MATCH (n:program) return count(n)")
    numberOfStudies: Int @cypher(statement: "MATCH (n:study) return count(n)")
    numberOfSubjects: Int @cypher(statement: "MATCH (n:study_subject) return count(n)")
    numberOfSamples: Int @cypher(statement: "MATCH (n:sample) return count(n)")
    numberOfLabProcedures: Int  @cypher(statement: "MATCH (n:laboratory_procedure) return count(n)")
    numberOfFiles: Int @cypher(statement: "MATCH (n:file) return count(n)")

    "Get lists of all subject ids, sample ids, and file ids"
    idsLists: [IdsLists] @cypher(statement: """
        MATCH (samp:sample)
        WITH COLLECT(DISTINCT  samp.sample_id) as samples
        MATCH (ss:study_subject)
        WITH COLLECT(DISTINCT ss.study_subject_id) as study_subjects, samples
        MATCH (f:file)
        WITH COLLECT(DISTINCT f.file_id) as fileIds, COLLECT(DISTINCT f.file_name) as fileNames, samples, study_subjects
        RETURN {
            sampleIds: samples,
            fileIds: fileIds,
            fileNames: fileNames,
            subjectIds: study_subjects 
        }
    """, passThrough: true)

    "Group counts"
    subjectCountByProgram(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:program)
        OPTIONAL MATCH (g)<--(:study)<--(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN { group: g.program_acronym,
                 subjects: count(ss) }
    """, passThrough: true)

    subjectCountByStudy(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:study)
        OPTIONAL MATCH (g)<--(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN { group: g.study_acronym + ': ' + g.study_short_description,
                 subjects: count(ss)}
    """, passThrough: true)

    subjectCountByDiagnoses(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN { group: ss.disease_subtype, subjects: count(ss) }
    """, passThrough: true)

    subjectCountByRecurrenceScore(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:stratification_factor)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.grouped_recurrence_score , subjects: count(ss) }
    """, passThrough: true)

    subjectCountByTumorSize(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.tumor_size_group, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByTumorGrade(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.tumor_grade, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByErStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.er_status, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByPrStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.pr_status, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByChemotherapyRegimen(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.chemotherapy_regimen, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByEndocrineTherapy(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.endocrine_therapy_type, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByMenopauseStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:demographic_data)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: g.menopause_status, subjects: count(ss)}
    """, passThrough: true)

    subjectCountByTissueType(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        WITH DISTINCT samp, ss
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: samp.tissue_type, subjects: count(samp)}
    """, passThrough: true)

    subjectCountByTissueComposition(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        WITH DISTINCT samp, ss
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: samp.composition, subjects: count(samp)}
    """, passThrough: true)

    subjectCountByFileAssociation(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-[*..3]->(ss:study_subject)
        MATCH (f)-->(parent)
            WHERE NOT (parent:laboratory_procedure)
                  AND (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: head(labels(parent)), subjects: count(f)}
    """, passThrough: true)

    subjectCountByFileType(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-[*..3]->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {group: f.file_type, subjects: count(DISTINCT f)}
    """, passThrough: true)

    "Group counts from lists of subject ids, file ids, and sample ids"

    subjectCountByProgramFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (p:program)<--(:study)<--(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN { 
            group: p.program_acronym,
            subjects: COUNT(DISTINCT ss) 
        }
    """, passThrough: true)

    subjectCountByStudyFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (s:study)<--(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN { 
            group: s.study_acronym + ': ' + s.study_short_description,
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByDiagnosesFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN { 
            group: ss.disease_subtype, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByRecurrenceScoreFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (sf:stratification_factor)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(f)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {   
            group: sf.grouped_recurrence_score, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByTumorSizeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: d.tumor_size_group, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByTumorGradeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: d.tumor_grade, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByErStatusFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: d.er_status, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByPrStatusFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: d.pr_status, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByChemotherapyRegimenFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (tp:therapeutic_procedure)-->(:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: tp.chemotherapy_regimen, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByEndocrineTherapyFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (tp:therapeutic_procedure)-->(:diagnosis)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: tp.endocrine_therapy_type, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByMenopauseStatusFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (demo:demographic_data)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp:sample)-->(ss)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: demo.menopause_status, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByTissueTypeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (samp)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: samp.tissue_type, 
            subjects: COUNT(DISTINCT samp)
        }
    """, passThrough: true)

    subjectCountByTissueCompositionFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (samp)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids) 
        RETURN {
            group: samp.composition, 
            subjects: COUNT(DISTINCT samp)
        }
    """, passThrough: true)

    subjectCountByFileAssociationFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-->(parent)
            WHERE NOT (parent:laboratory_procedure)
            AND (size($file_ids) = 0 OR f.file_id IN $file_ids)
        MATCH (f)-->(samp:sample)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (samp)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {
            group: head(labels(parent)), 
            subjects: COUNT(DISTINCT f)
        }
    """, passThrough: true)

    subjectCountByFileTypeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-->(parent)
            WHERE NOT (parent:laboratory_procedure)
            AND (size($file_ids) = 0 OR f.file_id IN $file_ids)
        MATCH (f)-->(samp:sample)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        MATCH (samp)-->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN {
            group: f.file_type, 
            subjects: COUNT(DISTINCT f)
        }
    """, passThrough: true)

    nodeCountsFromLists (subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = []): NodeCounts @cypher(statement: """
        // Filtering subjects
        MATCH(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        MATCH (samp)-->(ss:study_subject)
            WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids) 
        MATCH (f:file)-->(samp)
            WHERE (size($file_ids) = 0 OR f.file_id IN $file_ids)
        OPTIONAL MATCH (p:program)<--(s:study)<--(ss)
        OPTIONAL MATCH (f)-->(lp:laboratory_procedure)
        RETURN  {
            numberOfPrograms: COUNT(DISTINCT p.program_acronym),
            numberOfStudies: COUNT(DISTINCT s.study_acronym),
            numberOfSubjects: COUNT(DISTINCT ss.study_subject_id),
            numberOfLabProcedures: COUNT(DISTINCT lp.laboratory_procedure_id),
            numberOfSamples: COUNT(DISTINCT samp.sample_id),
            numberOfFiles: COUNT(DISTINCT f)
        }
    """, passThrough:true)

    armsByPrograms(subject_ids: [String] = []): [ProgramArms] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
          WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        WITH p, COUNT(DISTINCT ss) AS caseSize
        OPTIONAL MATCH (p)<-[:study_of_program]-(s)<-[:study_subject_of_study]-(ss)
          WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        WITH
            p, caseSize,
            {arm: s.study_acronym, caseSize: COUNT(DISTINCT ss), size: COUNT(DISTINCT ss)} AS s
        RETURN  { program: p.program_acronym,
                  caseSize: caseSize,
                  children: collect(s) }
    """, passThrough: true)

    "Facet search counts"
    filterSubjectCountByProgram(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, p
        RETURN {group: p.program_acronym , subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByStudy(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            //AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, s
        RETURN {group: s.study_acronym + ': ' + s.study_short_description, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByDiagnoses(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            //AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss
        RETURN {group: ss.disease_subtype, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByRecurrenceScore(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          //WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, sf
        RETURN {group: sf.grouped_recurrence_score, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByTumorSize(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE //(size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN {group: d.tumor_size_group, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByTumorGrade(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            //AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN {group: d.tumor_grade, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByErStatus(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            //AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN {group: d.er_status, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByPrStatus(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            //AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN {group: d.pr_status, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByChemotherapyRegimen(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            //AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, tp
        RETURN {group: tp.chemotherapy_regimen, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByEndocrineTherapy(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            //AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, tp
        RETURN {group: tp.endocrine_therapy_type, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByMenopauseStatus(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          //WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, demo
        RETURN {group: demo.menopause_status, subjects: count(ss)}
    """, passThrough: true)

    filterSubjectCountByTissueType(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE //(size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT samp
        RETURN {group: samp.tissue_type, subjects: count(samp)}
    """, passThrough: true)

    filterSubjectCountByTissueComposition(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            //AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT samp
        RETURN {group: samp.composition, subjects: count(samp)}
    """, passThrough: true)

    filterSubjectCountByFileAssociation(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            //AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT f, parent
        RETURN {group: head(labels(parent)), subjects: count(f)}
    """, passThrough: true)

    filterSubjectCountByFileType(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE //(size($file_type) = 0 OR f.file_type IN $file_type)
            (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT f
        RETURN {group: f.file_type, subjects: count(f)}
    """, passThrough: true)

    subjectOverViewPaged(subject_ids: [String] = [""], order_by: String = ""): [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ($subject_ids IS NULL OR $subject_ids = [""] OR ss.study_subject_id IN $subject_ids)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
            collect(DISTINCT f {.*}) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN {
            program: p.program_acronym,
            program_id: p.program_id,
            study_acronym: s.study_acronym,
            study_short_description: s.study_short_description,
            study_info: s.study_acronym + ': ' + s.study_short_description,
            subject_id: ss.study_subject_id,
            diagnosis: ss.disease_subtype,
            recurrence_score: sf.grouped_recurrence_score,
            tumor_size: d.tumor_size_group,
            tumor_grade: d.tumor_grade,
            er_status: d.er_status,
            pr_status: d.pr_status,
            chemotherapy: tp.chemotherapy_regimen,
            endocrine_therapy: tp.endocrine_therapy_type,
            menopause_status: demo.menopause_status,
            age_at_index: demo.age_at_index,
            survival_time: demo.survival_time,
            survival_time_unit: demo.survival_time_unit,
            samples: samples,
            files: files,
            lab_procedures: lab_procedures
        }
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'program' THEN p.program_acronym
            WHEN 'program_id' THEN p.program_id
            WHEN 'study_acronym' THEN s.study_acronym
            WHEN 'study_short_description' THEN s.study_short_description
            WHEN 'study_info' THEN s.study_acronym + ': ' + s.study_short_description
            WHEN 'diagnosis' THEN ss.disease_subtype
            WHEN 'recurrence_score' THEN sf.grouped_recurrence_score
            WHEN 'tumor_size' THEN d.tumor_size_group
            WHEN 'tumor_grade' THEN d.tumor_grade
            WHEN 'er_status' THEN d.er_status
            WHEN 'pr_status' THEN d.pr_status
            WHEN 'chemotherapy' THEN tp.chemotherapy_regimen
            WHEN 'endocrine_therapy' THEN tp.endocrine_therapy_type
            WHEN 'menopause_status' THEN demo.menopause_status
            WHEN 'age_at_index' THEN demo.age_at_index
            WHEN 'survival_time' THEN demo.survival_time
            ELSE subject_id_num END
    """, passThrough: true)

    subjectOverViewPagedDesc(subject_ids: [String] = [""], order_by: String = ""): [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ($subject_ids IS NULL OR $subject_ids = [""] OR ss.study_subject_id IN $subject_ids)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
            collect(DISTINCT f {.*}) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN {
            program: p.program_acronym,
            program_id: p.program_id,
            study_acronym: s.study_acronym,
            study_short_description: s.study_short_description,
            study_info: s.study_acronym + ': ' + s.study_short_description,
            subject_id: ss.study_subject_id,
            diagnosis: ss.disease_subtype,
            recurrence_score: sf.grouped_recurrence_score,
            tumor_size: d.tumor_size_group,
            tumor_grade: d.tumor_grade,
            er_status: d.er_status,
            pr_status: d.pr_status,
            chemotherapy: tp.chemotherapy_regimen,
            endocrine_therapy: tp.endocrine_therapy_type,
            menopause_status: demo.menopause_status,
            age_at_index: demo.age_at_index,
            survival_time: demo.survival_time,
            survival_time_unit: demo.survival_time_unit,
            samples: samples,
            files: files,
            lab_procedures: lab_procedures
        }
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'program' THEN p.program_acronym
            WHEN 'program_id' THEN p.program_id
            WHEN 'study_acronym' THEN s.study_acronym
            WHEN 'study_short_description' THEN s.study_short_description
            WHEN 'study_info' THEN s.study_acronym + ': ' + s.study_short_description
            WHEN 'diagnosis' THEN ss.disease_subtype
            WHEN 'recurrence_score' THEN sf.grouped_recurrence_score
            WHEN 'tumor_size' THEN d.tumor_size_group
            WHEN 'tumor_grade' THEN d.tumor_grade
            WHEN 'er_status' THEN d.er_status
            WHEN 'pr_status' THEN d.pr_status
            WHEN 'chemotherapy' THEN tp.chemotherapy_regimen
            WHEN 'endocrine_therapy' THEN tp.endocrine_therapy_type
            WHEN 'menopause_status' THEN demo.menopause_status
            WHEN 'age_at_index' THEN demo.age_at_index
            WHEN 'survival_time' THEN demo.survival_time
            ELSE subject_id_num END DESC
    """, passThrough: true)

    subjectOverView: [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH ss, collect(DISTINCT sp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f {.*}) AS files
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN {
            program: p.program_acronym,
            program_id: p.program_id,
            study_acronym: s.study_acronym,
            study_short_description: s.study_short_description,
            study_info: s.study_acronym + ': ' + s.study_short_description,
            subject_id: ss.study_subject_id,
            diagnosis: ss.disease_subtype,
            recurrence_score: sf.grouped_recurrence_score,
            tumor_size: d.tumor_size_group,
            tumor_grade: d.tumor_grade,
            er_status: d.er_status,
            pr_status: d.pr_status,
            chemotherapy: tp.chemotherapy_regimen,
            endocrine_therapy: tp.endocrine_therapy_type,
            menopause_status: demo.menopause_status,
            age_at_index: demo.age_at_index,
            survival_time: demo.survival_time,
            survival_time_unit: demo.survival_time_unit,
            samples: samples,
            files: files,
            lab_procedures: lab_procedures
        }
    """, passThrough: true)

    searchSubjects2 (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = []
    ): [String] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        RETURN DISTINCT ss.study_subject_id
    """)

    searchSubjects (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = [],
          first: Int = 100
    ): SearchResult @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)

        // Preparing return values
        OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
        WITH DISTINCT ss AS ss, samp, lp, f, COLLECT(DISTINCT lp.laboratory_procedure_id) as lab_procedures
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  {
            subjectIds: COLLECT(DISTINCT ss.study_subject_id),
            sampleIds: COLLECT(DISTINCT samp.sample_id),
            fileIds: COLLECT(DISTINCT f.file_id),
            numberOfPrograms: COUNT(DISTINCT p.program_acronym),
            numberOfStudies: COUNT(DISTINCT s.study_acronym),
            numberOfSubjects: COUNT(DISTINCT ss.study_subject_id),
            numberOfLabProcedures: COUNT(DISTINCT lp.laboratory_procedure_id),
            numberOfSamples: COUNT(DISTINCT samp.sample_id),
            numberOfFiles: COUNT(DISTINCT f),
            firstPage: COLLECT( DISTINCT({
                          subject_id: ss.study_subject_id,
                          program: p.program_acronym,
                          program_id: p.program_id,
                          study_acronym: s.study_acronym,
                          diagnosis: ss.disease_subtype,
                          recurrence_score: sf.grouped_recurrence_score,
                          tumor_size: d.tumor_size_group,
                          tumor_grade: d.tumor_grade,
                          er_status: d.er_status,
                          pr_status: d.pr_status,
                          age_at_index: demo.age_at_index,
                          survival_time: demo.survival_time,
                          survival_time_unit: demo.survival_time_unit
                      }))[0..$first]
        }
    """, passThrough:true)


    subjectsInList(subject_ids: [String]=[]): [SubjectInfo] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  {
            program: p.program_acronym,
            program_id: p.program_id,
            study_acronym: s.study_acronym,
            subject_id: ss.study_subject_id,
            diagnosis: ss.disease_subtype,
            recurrence_score: sf.grouped_recurrence_score,
            tumor_size: d.tumor_size_group,
            er_status: d.er_status,
            pr_status: d.pr_status,
            age_at_index: demo.age_at_index,
            survival_time: demo.survival_time,
            survival_time_unit: demo.survival_time_unit
        }
    """, passThrough: true)

    filesOfSubjects(subject_ids: [String]=[]): [FileInfo] @cypher(statement:"""
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)<-[*..3]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        RETURN {
            subject_id: ss.study_subject_id,
            file_name: f.file_name,
            file_type: f.file_type,
            association: head(labels(parent)),
            file_description: f.file_description,
            file_format: f.file_format,
            file_size: f.file_size,
            file_id: f.file_id,
            md5sum: f.md5sum
        }
    """, passThrough: true)

    programInfo: [ProgramInfo] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)
        OPTIONAL MATCH (s)<--(ss:study_subject)
        RETURN {
            program_acronym: p.program_acronym,
            program_id: p.program_id,
            program_name: p.program_name,
            start_date: p.start_date,
            end_date: p.end_date,
            pubmed_id: p.pubmed_id,
            num_studies: COUNT(DISTINCT s),
            num_subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)
    programDetail(program_id: String):  ProgramDetail @cypher(statement: """
        MATCH (p:program {program_id: $program_id})
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
        OPTIONAL MATCH (ss)<-[sp:sample_of_study_subject]-()<-[:file_of_sample]-(f)
        WITH p,
            count(DISTINCT f) AS num_files,
            count(DISTINCT sp) AS num_samples,
            count(DISTINCT ss) AS num_subjects,
            collect(DISTINCT ss.disease_subtype) AS disease_subtypes
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:file_of_study]-(fs)
        WITH p, count(DISTINCT fs) + num_files AS num_files,
            num_samples, num_subjects, disease_subtypes
        MATCH (p)<-[:study_of_program]-(s)<-[:study_subject_of_study]-(ss)
        WITH s {.study_type, .study_acronym, .study_name, .study_full_description, num_subjects:count(DISTINCT ss),study_info: s.study_acronym + ': ' + s.study_short_description} AS study,
            p, num_files, num_subjects, disease_subtypes, num_samples
        OPTIONAL MATCH (p)-->(ins:institution)
        OPTIONAL MATCH (p)<-[:laboratory_procedure_of_program]-(lp)
        WITH study, p, num_files, num_subjects, disease_subtypes, num_samples, ins, lp
        MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
        WITH p, ss.disease_subtype as group, count(*) as subjects, study, num_files, num_subjects, disease_subtypes, num_samples, ins, lp
        WITH p, COLLECT ({group: group, subjects:  subjects}) AS diagnoses, study, num_files, num_subjects, disease_subtypes, num_samples, ins, lp
        RETURN {
            program_acronym: p.program_acronym,
            program_id: p.program_id,
            program_name: p.program_name,
            program_full_description: p.program_full_description,
            institution_name: ins.institution_name,
            program_external_url: p.program_external_url,
            num_subjects: num_subjects,
            num_files: num_files,
            num_lab_procedures: COUNT (DISTINCT lp),
            num_samples: num_samples,
            disease_subtypes: disease_subtypes,
            studies: collect(DISTINCT study),
            diagnoses: diagnoses
        }
    """, passThrough: true)

    subjectDetail(subject_id: String): SubjectDetail @cypher(statement:  """
        MATCH (ss:study_subject {study_subject_id: $subject_id})
        OPTIONAL MATCH (ss)-->(s:study)
        OPTIONAL MATCH (s)-->(p:program)
        OPTIONAL MATCH (ss)<-[*..3]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        WITH p, s, ss, collect(f {subject_id:ss.study_subject_id, .file_name, .file_type,
            association:head(labels(parent)), .file_description, .file_format, .file_size, .file_id, .md5sum}) AS files
        OPTIONAL MATCH (ss)<--(demo:demographic_data)
        OPTIONAL MATCH (ss)<--(diag:diagnosis)
        OPTIONAL MATCH (diag)<--(pr:therapeutic_procedure)
        OPTIONAL MATCH (ss)<--(fu:follow_up)
        OPTIONAL MATCH (ss)<--(samp:sample)
        OPTIONAL MATCH (ss)<--()-->(lp:laboratory_procedure)
        RETURN {
            subject_id: ss.study_subject_id,
            program_acronym: p.program_acronym,
            program_id: p.program_id,
            study_acronym: s.study_acronym,
            study_name: s.study_name,
            gender: demo.gender,
            race: demo.race,
            ethnicity: demo.ethnicity,
            age_at_index: demo.age_at_index,
            menopause_status: demo.menopause_status,
            vital_status: demo.vital_status,
            cause_of_death: demo.cause_of_death,
            disease_type: ss.disease_type,
            disease_subtype: ss.disease_subtype,
            tumor_grade: diag.tumor_grade,
            tumor_largest_dimension_diameter: diag.tumor_largest_dimension_diameter,
            er_status: diag.er_status,
            pr_status: diag.pr_status,
            nuclear_grade: diag.nuclear_grade,
            recurrence_score: diag.recurrence_score,
            primary_surgical_procedure: pr.primary_surgical_procedure,
            chemotherapy_regimen_group: pr.chemotherapy_regimen_group,
            chemotherapy_regimen: pr.chemotherapy_regimen,
            endocrine_therapy_type: pr.endocrine_therapy_type,
            dfs_event_indicator: fu.dfs_event_indicator,
            recurrence_free_indicator: fu.recurrence_free_indicator,
            distant_recurrence_indicator: fu.distant_recurrence_indicator,
            dfs_event_type: fu.dfs_event_type,
            first_recurrence_type: fu.first_recurrence_type,
            days_to_progression: fu.days_to_progression,
            days_to_recurrence: fu.days_to_recurrence,
            test_name: lp.test_name,
            files: files,
            samples: COLLECT(DISTINCT samp {.*}),
            num_samples: COUNT(DISTINCT samp),
            num_lab_procedures: COUNT(DISTINCT lp)
        }
    """, passThrough: true)

    armDetail(study_acronym: String): ArmDetail @cypher(statement:  """
        MATCH (s:study {study_acronym: $study_acronym})<-[:study_subject_of_study]-(ss)
        WITH s, ss.disease_subtype AS group, COUNT(DISTINCT ss) AS subjects
        WITH s, COLLECT ({group: group, subjects:  subjects}) AS diagnoses
        OPTIONAL MATCH (s)<-[:file_of_study]-(f)
        WITH s, diagnoses, COLLECT(DISTINCT f {.file_name, .file_type, .file_description, .file_format, .file_size, .file_id, .md5sum, association: "study"}) AS files
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-()<-[:sample_of_study_subject]-()<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH s, diagnoses, files, COUNT(DISTINCT f) + size(files) AS num_files, COUNT(DISTINCT lp) AS num_lab_procedures
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-(ss)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)
        RETURN {
            study_acronym: s.study_acronym,
            study_name: s.study_name,
            study_type: s.study_type,
            study_full_description: s.study_full_description,
            study_info: s.study_acronym + ': ' + s.study_short_description,
            num_subjects: COUNT(DISTINCT ss),
            num_samples: COUNT(DISTINCT sp),
            num_lab_procedures: num_lab_procedures,
            num_files: num_files,
            diagnoses: diagnoses,
            files: files
        }
    """, passThrough: true)

    samplesForSubjectId(subject_id: String!): [sample] @cypher(statement: "MATCH (ss:study_subject {study_subject_id: $subject_id})<-[*]-(s:sample) RETURN s")

    filesInList(file_ids: [String], order_by: String = ""): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            head(labels(parent)) AS association,
            f, parent, ss, s
        RETURN {
            file_name: f.file_name,
            file_id: f.file_id,
            file_type: f.file_type,
            association: association,
            file_description: f.file_description,
            file_format: f.file_format,
            file_size: f.file_size,
            md5sum: f.md5sum,
            subject_id: ss.study_subject_id,
            study_code: s.study_acronym
        }
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN f.file_id
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_type' THEN f.file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN f.file_description
            WHEN 'file_format' THEN f.file_format
            WHEN 'file_size' THEN f.file_size
            WHEN 'md5sum' THEN f.md5sum
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'study_code' THEN s.study_acronym
            ELSE file_id_num END
    """, passThrough: true)

    filesInListDesc(file_ids: [String], order_by: String = ""): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            head(labels(parent)) AS association,
            f, parent, ss, s
        RETURN {
            file_name: f.file_name,
            file_id: f.file_id,
            file_type: f.file_type,
            association: association,
            file_description: f.file_description,
            file_format: f.file_format,
            file_size: f.file_size,
            md5sum: f.md5sum,
            subject_id: ss.study_subject_id,
            study_code: s.study_acronym
        }
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN f.file_id
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_type' THEN f.file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN f.file_description
            WHEN 'file_format' THEN f.file_format
            WHEN 'file_size' THEN f.file_size
            WHEN 'md5sum' THEN f.md5sum
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'study_code' THEN s.study_acronym
            ELSE file_id_num END DESC
    """, passThrough: true)

    sampleOverview(subject_ids: [String] = [""], sample_ids: [String] = [""], order_by: String = ""): [SampleOverview] @cypher(statement: """
        MATCH (samp:sample)
          WHERE ($sample_ids IS NULL OR $sample_ids = [""] OR samp.sample_id IN $sample_ids)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p
          WHERE ($subject_ids IS NULL OR $subject_ids = [""] OR ss.study_subject_id IN $subject_ids)
        RETURN {
            sample_id: samp.sample_id,
            subject_id: ss.study_subject_id,
            program: p.program_acronym,
            arm: s.study_acronym,
            diagnosis: ss.disease_subtype,
            tissue_type: samp.tissue_type,
            tissue_composition: samp.composition,
            sample_anatomic_site: samp.sample_anatomic_site,
            sample_procurement_method: samp.method_of_sample_procurement,
            platform: lp.test_name,
            files: files,
            program_id: p.program_id
        }
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'sample_id' THEN samp.sample_id
            WHEN 'program' THEN p.program_acronym
            WHEN 'arm' THEN s.study_acronym
            WHEN 'diagnosis' THEN ss.disease_subtype
            WHEN 'tissue_type' THEN samp.tissue_type
            WHEN 'tissue_composition' THEN samp.composition
            WHEN 'sample_anatomic_site' THEN samp.sample_anatomic_site
            WHEN 'sample_procurement_method' THEN samp.method_of_sample_procurement
            WHEN 'platform' THEN lp.test_name
            ELSE subject_id_num END
    """, passThrough: true)

    sampleOverviewDesc(subject_ids: [String] = [""], sample_ids: [String] = [""], order_by: String = ""): [SampleOverview] @cypher(statement: """
        MATCH (samp:sample)
          WHERE ($sample_ids IS NULL OR $sample_ids = [""] OR samp.sample_id IN $sample_ids)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p
          WHERE ($subject_ids IS NULL OR $subject_ids = [""] OR ss.study_subject_id IN $subject_ids)
        RETURN {
            sample_id: samp.sample_id,
            subject_id: ss.study_subject_id,
            program: p.program_acronym,
            arm: s.study_acronym,
            diagnosis: ss.disease_subtype,
            tissue_type: samp.tissue_type,
            tissue_composition: samp.composition,
            sample_anatomic_site: samp.sample_anatomic_site,
            sample_procurement_method: samp.method_of_sample_procurement,
            platform: lp.test_name,
            files: files,
            program_id: p.program_id
        }
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'sample_id' THEN samp.sample_id
            WHEN 'program' THEN p.program_acronym
            WHEN 'arm' THEN s.study_acronym
            WHEN 'diagnosis' THEN ss.disease_subtype
            WHEN 'tissue_type' THEN samp.tissue_type
            WHEN 'tissue_composition' THEN samp.composition
            WHEN 'sample_anatomic_site' THEN samp.sample_anatomic_site
            WHEN 'sample_procurement_method' THEN samp.method_of_sample_procurement
            WHEN 'platform' THEN lp.test_name
            ELSE subject_id_num END DESC
    """, passThrough: true)


    fileOverview(subject_ids: [String] = [""], file_ids: [String] = [""], order_by: String = ""): [FileOverview] @cypher(statement: """
        MATCH (f:file)
          WHERE ($file_ids IS NULL OR $file_ids = [""] OR f.file_id IN $file_ids)
        MATCH (f)-->(parent)
          WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[:file_of_sample]->(samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (f)-[:file_of_study]->(s1)-[:study_of_program]-(p1)
        WITH
            ss.study_subject_id AS subject_id, toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            f, ss, p, CASE p WHEN null THEN p1.program_acronym ELSE p.program_acronym END AS program, parent,
            CASE s WHEN null THEN s1.study_acronym ELSE s.study_acronym END AS arm, head(labels(parent)) AS association, samp, s1, p1
          WHERE ($subject_ids IS NULL OR $subject_ids = [""] OR subject_id IN $subject_ids)
        RETURN {
            file_id: f.file_id,
            file_name: f.file_name,
            association: association,
            file_description: f.file_description,
            file_format: f.file_format,
            file_size: f.file_size,
            program: program,
            arm: arm,
            subject_id: ss.study_subject_id,
            sample_id: samp.sample_id,
            diagnosis: ss.disease_subtype,
            program_id: p.program_id
        }
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'file_id' THEN f.file_id
            WHEN 'file_name' THEN f.file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN f.file_description
            WHEN 'file_format' THEN f.file_format
            WHEN 'file_size' THEN f.file_size
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'sample_id' THEN samp.sample_id
            WHEN 'diagnosis' THEN ss.disease_subtype
            ELSE f.file_name END
    """, passThrough: true)

    fileOverviewDesc(subject_ids: [String] = [""], file_ids: [String] = [""], order_by: String = ""): [FileOverview] @cypher(statement: """
        MATCH (f:file)
          WHERE ($file_ids IS NULL OR $file_ids = [""] OR f.file_id IN $file_ids)
        MATCH (f)-->(parent)
          WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[:file_of_sample]->(samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (f)-[:file_of_study]->(s1)-[:study_of_program]-(p1)
        WITH
            ss.study_subject_id AS subject_id, toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            f, ss, p, CASE p WHEN null THEN p1.program_acronym ELSE p.program_acronym END AS program, parent,
            CASE s WHEN null THEN s1.study_acronym ELSE s.study_acronym END AS arm, head(labels(parent)) AS association, samp, s1, p1
          WHERE ($subject_ids IS NULL OR $subject_ids = [""] OR subject_id IN $subject_ids)
        RETURN {
            file_id: f.file_id,
            file_name: f.file_name,
            association: association,
            file_description: f.file_description,
            file_format: f.file_format,
            file_size: f.file_size,
            program: program,
            arm: arm,
            subject_id: ss.study_subject_id,
            sample_id: samp.sample_id,
            diagnosis: ss.disease_subtype,
            program_id: p.program_id
        }
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'file_id' THEN f.file_id
            WHEN 'file_name' THEN f.file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN f.file_description
            WHEN 'file_format' THEN f.file_format
            WHEN 'file_size' THEN f.file_size
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'sample_id' THEN samp.sample_id
            WHEN 'diagnosis' THEN ss.disease_subtype
            ELSE f.file_name END DESC
    """, passThrough: true)

    fileIdsFromFileName(file_name: [String], order_by: String ="file_name"): [FileOverview] @cypher(statement: """
        MATCH (f:file)
        WHERE ($file_name IS NULL OR f.file_name IN $file_name)
        RETURN {
            file_name: f.file_name,
            file_id: f.file_id
        }
        ORDER BY CASE $order_by
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_id' THEN f.file_id
            ELSE f.file_name END
    """, passThrough: true)

    fileIdsFromFileNameDesc(file_name: [String], order_by: String ="file_name"): [FileOverview] @cypher(statement: """
        MATCH (f:file)
        WHERE ($file_name IS NULL OR f.file_name IN $file_name)
        RETURN {
            file_name: f.file_name,
            file_id: f.file_id
        }
        ORDER BY CASE $order_by
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_id' THEN f.file_id
            ELSE f.file_name END DESC
    """, passThrough: true)

    subjectList: [GroupList] @cypher(statement: """
    MATCH (ss:study_subject)
    RETURN
    {group: 'all', subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByProgram: [GroupList] @cypher(statement: """
    MATCH (p:program)
    OPTIONAL MATCH (p)<--(s:study)<--(ss:study_subject)
    RETURN
    {group: 'program:'+p.program_acronym, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByStudy: [GroupList] @cypher(statement: """
    MATCH (s:study)
    OPTIONAL MATCH (s)<-[:study_subject_of_study]-(ss:study_subject)
    RETURN
    {group: 'study:'+s.study_acronym + ': ' + s.study_short_description, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByDiagnoses: [GroupList] @cypher(statement: """
    MATCH (ss:study_subject)
    RETURN
    {group: 'diagnosis:'+ss.disease_subtype, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByRecurrenceScore: [GroupList] @cypher(statement: """
    MATCH (g:stratification_factor)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {group: 'recurrence score:'+g.grouped_recurrence_score, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByTumorSize: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {group: 'tumor size:'+g.tumor_size_group, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByTumorGrade: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'tumor grade:'+g.tumor_grade,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByErStatus: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'er status:'+g.er_status,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByPrStatus: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'pr status:'+g.pr_status,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByChemotherapyRegimen: [GroupList] @cypher(statement: """
    MATCH (g:therapeutic_procedure)
    OPTIONAL MATCH (g)-->()-->(ss:study_subject)
    RETURN
    {
        group: 'chemotherapy regimen:'+g.chemotherapy_regimen,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByEndocrineTherapy: [GroupList] @cypher(statement: """
    MATCH (g:therapeutic_procedure)
    OPTIONAL MATCH (g)-->()-->(ss:study_subject)
    RETURN
    {
        group: 'endocrine therapy:'+g.endocrine_therapy_type,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByMenopauseStatus: [GroupList] @cypher(statement: """
    MATCH (g:demographic_data)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'menopause status:'+g.menopause_status,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByTissueType: [GroupList] @cypher(statement: """
    MATCH (g:sample)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'tissue type:'+g.tissue_type,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByTissueComposition: [GroupList] @cypher(statement: """
    MATCH (g:sample)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'sample:'+g.composition,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByFileAssociation: [GroupList] @cypher(statement: """
    MATCH (g:file)
    OPTIONAL MATCH (g)-->(parent)-->(ss:study_subject)
    RETURN
    {
        group: 'file association:'+head(labels(parent)),
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByFileType: [GroupList] @cypher(statement: """
    MATCH (g:file)
    OPTIONAL MATCH (g)-->(parent)-->(ss:study_subject)
    RETURN
    {
        group: 'file type:'+g.file_type,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

}
