type GroupCount {
    group: String
    subjects: Int
}

type SubjectOverview {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    study_short_description: String
    study_info: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    tumor_grade: String
    er_status: String
    pr_status: String
    chemotherapy: String
    endocrine_therapy: String
    menopause_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
    files: [file]
    samples: [String]
    lab_procedures: [String]
}

type SubjectInfo {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type FileInfo {
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type FileDetail {
    study_code: String
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ProgramInfo {
    program_acronym: String
    program_id: String
    program_name: String
    start_date: String
    end_date: String
    pubmed_id: String
    num_studies: Int
    num_subjects: Int
}

type StudyInfo {
    study_acronym: String
    study_name: String
    study_full_description: String
    study_type: String
    study_info: String
    num_subjects: Int
}

type ProgramDetail {
    program_acronym: String
    program_id: String
    program_name: String
    program_full_description: String
    institution_name: String
    program_external_url: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    disease_subtypes: [String]
    studies: [StudyInfo]
    diagnoses: [GroupCount]
}

type SubjectDetail {
    subject_id: String
    program_acronym: String
    program_id: String
    study_acronym: String
    study_name: String
    gender: String
    race: String
    ethnicity: String
    age_at_index: Int
    menopause_status: String
    vital_status: String
    cause_of_death: String
    disease_type: String
    disease_subtype: String
    tumor_grade: String
    tumor_largest_dimension_diameter: Float
    er_status: String
    pr_status: String
    nuclear_grade: String
    recurrence_score: Int
    primary_surgical_procedure: String
    chemotherapy_regimen_group: String
    chemotherapy_regimen: String
    endocrine_therapy_type: String
    dfs_event_indicator: String
    recurrence_free_indicator: String
    distant_recurrence_indicator: String
    dfs_event_type: String
    first_recurrence_type: String
    days_to_progression: Int
    days_to_recurrence: Int
    test_name: String
    files: [FileInfo]
    samples: [sample]
    num_samples: Int
    num_lab_procedures: Int
}

type ArmInfo {
    arm: String
    size: Int
    caseSize: Int
}

type ProgramArms {
    program: String
    caseSize: Int
    children: [ArmInfo]
}

type ArmFile {
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ArmDetail {
    study_acronym: String
    study_name: String
    study_type: String
    study_full_description: String
    study_info: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    diagnoses: [GroupCount]
    files: [ArmFile]
}

type SampleOverview {
    sample_id: String
    subject_id: String
    program: String
    arm: String
    diagnosis: String
    tissue_type: String
    tissue_composition: String
    sample_anatomic_site: String
    sample_procurement_method: String
    platform: String
    files: [String]
    program_id: String
}

type FileOverview {
    file_id: String
    file_name: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    program: String
    arm: String
    subject_id: String
    sample_id: String
    diagnosis: String
    program_id: String
}

type SubjectOverview2 {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    tumor_grade: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type SearchResult {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubjects: Int
    numberOfSamples: Int
    numberOfLabProcedures: Int
    numberOfFiles: Int
    subjectIds: [String]
    sampleIds: [String]
    fileIds: [String]
    firstPage: [SubjectOverview2]
}

type GroupList {
    group: String
    subjects: [String]
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '1.0.4'")

    "Simple counts"
    numberOfPrograms: Int @cypher(statement: "MATCH (n:program) return count(n)")
    numberOfStudies: Int @cypher(statement: "MATCH (n:study) return count(n)")
    numberOfSubjects: Int @cypher(statement: "MATCH (n:study_subject) return count(n)")
    numberOfSamples: Int @cypher(statement: "MATCH (n:sample) return count(n)")
    numberOfLabProcedures: Int  @cypher(statement: "MATCH (n:laboratory_procedure) return count(n)")
    numberOfFiles: Int @cypher(statement: "MATCH (n:file) return count(n)")

    "Group counts"
    subjectCountByProgram(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:program)
        OPTIONAL MATCH (g)<--(:study)<--(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.program_acronym AS group,
               count(ss) as subjects
    """)
    subjectCountByStudy(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:study)
        OPTIONAL MATCH (g)<--(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.study_acronym + ': ' + g.study_short_description AS group,
               count(ss) as subjects
    """)

    subjectCountByDiagnoses(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN ss.disease_subtype AS group, count(ss) as subjects
    """)

    subjectCountByRecurrenceScore(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:stratification_factor)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.grouped_recurrence_score AS group, count(ss) as subjects
    """)

    subjectCountByTumorSize(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.tumor_size_group AS group, count(ss) as subjects
    """)

    subjectCountByTumorGrade(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.tumor_grade AS group, count(ss) as subjects
    """)

    subjectCountByErStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.er_status AS group, count(ss) as subjects
    """)

    subjectCountByPrStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.pr_status AS group, count(ss) as subjects
    """)

    subjectCountByChemotherapyRegimen(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.chemotherapy_regimen AS group, count(ss) as subjects
    """)

    subjectCountByEndocrineTherapy(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.endocrine_therapy_type AS group, count(ss) as subjects
    """)

    subjectCountByMenopauseStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:demographic_data)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WITH DISTINCT ss, g
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN g.menopause_status AS group, count(ss) as subjects
    """)

    subjectCountByTissueType(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        WITH DISTINCT samp, ss
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN samp.tissue_type AS group, COUNT(samp) as subjects
    """)

    subjectCountByTissueComposition(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        WITH DISTINCT samp, ss
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN samp.composition AS group, COUNT(samp) as subjects
    """)

    subjectCountByFileAssociation(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-[*..3]->(ss:study_subject)
        MATCH (f)-->(parent)
            WHERE NOT (parent:laboratory_procedure)
                  AND (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN head(labels(parent)) AS group, COUNT(f) as subjects
    """)

    subjectCountByFileType(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-[*..3]->(ss:study_subject)
            WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN f.file_type AS group, COUNT(DISTINCT f) as subjects
    """)

    armsByPrograms(subject_ids: [String] = []): [ProgramArms] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
          WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        WITH p, COUNT(DISTINCT ss) AS caseSize
        OPTIONAL MATCH (p)<-[:study_of_program]-(s)<-[:study_subject_of_study]-(ss)
          WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        WITH
            p, caseSize,
            {arm: s.study_acronym, caseSize: COUNT(DISTINCT ss), size: COUNT(DISTINCT ss)} AS s
        RETURN  p.program_acronym AS program,
                caseSize,
                collect(s) AS children
    """, passThrough: true)

    "Facet search counts"
    filterSubjectCountByProgram(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByStudy(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            //AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, s
        RETURN s.study_acronym + ': ' + s.study_short_description AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByDiagnoses(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            //AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss
        RETURN ss.disease_subtype AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByRecurrenceScore(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          //WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, sf
        RETURN sf.grouped_recurrence_score AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByTumorSize(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE //(size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN d.tumor_size_group AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByTumorGrade(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            //AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN d.tumor_grade AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByErStatus(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            //AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN d.er_status AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByPrStatus(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            //AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, d
        RETURN d.pr_status AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByChemotherapyRegimen(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            //AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, tp
        RETURN tp.chemotherapy_regimen AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByEndocrineTherapy(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            //AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, tp
        RETURN tp.endocrine_therapy_type AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByMenopauseStatus(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          //WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT ss, demo
        RETURN demo.menopause_status AS group,
               count(ss) as subjects
    """)

    filterSubjectCountByTissueType(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE //(size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT samp
        RETURN samp.tissue_type AS group,
               count(samp) as subjects
    """)

    filterSubjectCountByTissueComposition(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            //AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT samp
        RETURN samp.composition AS group,
               count(samp) as subjects
    """)

    filterSubjectCountByFileAssociation(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            //AND (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT f, parent
        RETURN head(labels(parent)) AS group,
               count(f) as subjects
    """)

    filterSubjectCountByFileType(
        programs: [String] = [],
        studies: [String] = [],
        diagnoses: [String] = [],
        rc_scores: [String] = [],
        tumor_sizes: [String] = [],
        chemo_regimen: [String] = [],
        tumor_grades: [String] = [],
        er_status: [String] = [],
        pr_status: [String] = [],
        endo_therapies: [String] = [],
        meno_status: [String] = [],
        tissue_type: [String] = [],
        composition: [String] = [],
        association: [String] = [],
        file_type: [String] = []
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE //(size($file_type) = 0 OR f.file_type IN $file_type)
            (size($association) = 0 OR head(labels(parent)) IN $association)
        WITH DISTINCT f
        RETURN f.file_type AS group,
               count(f) as subjects
    """)

    subjectOverViewPaged(first: Int = 100, offset: Int = 0, subject_ids: [String], order_by: String = ""): [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ($subject_ids IS NULL OR ss.study_subject_id IN $subject_ids)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
            collect(DISTINCT f) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN
            p.program_acronym AS program,
            p.program_id AS program_id,
            s.study_acronym AS study_acronym,
            s.study_short_description AS study_short_description,
            s.study_acronym + ': ' + s.study_short_description AS study_info,
            ss.study_subject_id AS subject_id,
            ss.disease_subtype AS diagnosis,
            sf.grouped_recurrence_score AS recurrence_score,
            d.tumor_size_group AS tumor_size,
            d.tumor_grade AS tumor_grade,
            d.er_status AS er_status,
            d.pr_status AS pr_status,
            tp.chemotherapy_regimen AS chemotherapy,
            tp.endocrine_therapy_type AS endocrine_therapy,
            demo.menopause_status AS menopause_status,
            demo.age_at_index AS age_at_index,
            demo.survival_time AS survival_time,
            demo.survival_time_unit AS survival_time_unit,
            samples,
            files,
            lab_procedures
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'program' THEN program
            WHEN 'program_id' THEN program_id
            WHEN 'study_acronym' THEN study_acronym
            WHEN 'study_short_description' THEN study_short_description
            WHEN 'study_info' THEN study_info
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'recurrence_score' THEN recurrence_score
            WHEN 'tumor_size' THEN tumor_size
            WHEN 'tumor_grade' THEN tumor_grade
            WHEN 'er_status' THEN er_status
            WHEN 'pr_status' THEN pr_status
            WHEN 'chemotherapy' THEN chemotherapy
            WHEN 'endocrine_therapy' THEN endocrine_therapy
            WHEN 'menopause_status' THEN menopause_status
            WHEN 'age_at_index' THEN age_at_index
            WHEN 'survival_time' THEN survival_time
            ELSE subject_id_num END
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    subjectOverViewPagedDesc(first: Int = 100, offset: Int = 0, subject_ids: [String], order_by: String = ""): [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ($subject_ids IS NULL OR ss.study_subject_id IN $subject_ids)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
            collect(DISTINCT f) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN
            p.program_acronym AS program,
            p.program_id AS program_id,
            s.study_acronym AS study_acronym,
            s.study_short_description AS study_short_description,
            s.study_acronym + ': ' + s.study_short_description AS study_info,
            ss.study_subject_id AS subject_id,
            ss.disease_subtype AS diagnosis,
            sf.grouped_recurrence_score AS recurrence_score,
            d.tumor_size_group AS tumor_size,
            d.tumor_grade AS tumor_grade,
            d.er_status AS er_status,
            d.pr_status AS pr_status,
            tp.chemotherapy_regimen AS chemotherapy,
            tp.endocrine_therapy_type AS endocrine_therapy,
            demo.menopause_status AS menopause_status,
            demo.age_at_index AS age_at_index,
            demo.survival_time AS survival_time,
            demo.survival_time_unit AS survival_time_unit,
            samples,
            files,
            lab_procedures
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'program' THEN program
            WHEN 'program_id' THEN program_id
            WHEN 'study_acronym' THEN study_acronym
            WHEN 'study_short_description' THEN study_short_description
            WHEN 'study_info' THEN study_info
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'recurrence_score' THEN recurrence_score
            WHEN 'tumor_size' THEN tumor_size
            WHEN 'tumor_grade' THEN tumor_grade
            WHEN 'er_status' THEN er_status
            WHEN 'pr_status' THEN pr_status
            WHEN 'chemotherapy' THEN chemotherapy
            WHEN 'endocrine_therapy' THEN endocrine_therapy
            WHEN 'menopause_status' THEN menopause_status
            WHEN 'age_at_index' THEN age_at_index
            WHEN 'survival_time' THEN survival_time
            ELSE subject_id_num END DESC
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    subjectOverView: [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH ss, collect(DISTINCT sp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f) AS files
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                s.study_short_description AS study_short_description,
                s.study_acronym + ': ' + s.study_short_description AS study_info,
                ss.study_subject_id AS subject_id,
                ss.disease_subtype AS diagnosis,
                sf.grouped_recurrence_score AS recurrence_score,
                d.tumor_size_group AS tumor_size,
                d.tumor_grade AS tumor_grade,
                d.er_status AS er_status,
                d.pr_status AS pr_status,
                tp.chemotherapy_regimen AS chemotherapy,
                tp.endocrine_therapy_type AS endocrine_therapy,
                demo.menopause_status AS menopause_status,
                demo.age_at_index AS age_at_index,
                demo.survival_time AS survival_time,
                demo.survival_time_unit AS survival_time_unit,
                samples,
                files,
                lab_procedures
    """, passThrough: true)

    searchSubjects2 (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = []
    ): [String] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        RETURN DISTINCT ss.study_subject_id
    """)

    searchSubjects (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = [],
          first: Int = 100
    ): SearchResult @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)

        // Preparing return values
        OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
        WITH DISTINCT ss AS ss, samp, lp, f, COLLECT(DISTINCT lp.laboratory_procedure_id) as lab_procedures
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  COLLECT(DISTINCT ss.study_subject_id) AS subjectIds,
                COLLECT(DISTINCT samp.sample_id) AS sampleIds,
                COLLECT(DISTINCT f.file_id) AS fileIds,
                COUNT(DISTINCT p.program_acronym) AS numberOfPrograms,
                COUNT(DISTINCT s.study_acronym) AS numberOfStudies,
                COUNT(DISTINCT ss.study_subject_id) AS numberOfSubjects,
                COUNT(DISTINCT lp.laboratory_procedure_id) AS numberOfLabProcedures,
                COUNT(DISTINCT samp.sample_id) AS numberOfSamples,
                COUNT(DISTINCT f) AS numberOfFiles,
                COLLECT( DISTINCT({
                  subject_id: ss.study_subject_id,
                  program: p.program_acronym,
                  program_id: p.program_id,
                  study_acronym: s.study_acronym,
                  diagnosis: ss.disease_subtype,
                  recurrence_score: sf.grouped_recurrence_score,
                  tumor_size: d.tumor_size_group,
                  tumor_grade: d.tumor_grade,
                  er_status: d.er_status,
                  pr_status: d.pr_status,
                  age_at_index: demo.age_at_index,
                  survival_time: demo.survival_time,
                  survival_time_unit: demo.survival_time_unit
              }))[0..$first] AS firstPage
    """, passThrough:true)


    subjectsInList(subject_ids: [String]=[]): [SubjectInfo] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                ss.study_subject_id AS subject_id,
                ss.disease_subtype AS diagnosis,
                sf.grouped_recurrence_score AS recurrence_score,
                d.tumor_size_group AS tumor_size,
                d.er_status AS er_status,
                d.pr_status AS pr_status,
                demo.age_at_index AS age_at_index,
                demo.survival_time AS survival_time,
                demo.survival_time_unit AS survival_time_unit
    """)

    filesOfSubjects(subject_ids: [String]=[]): [FileInfo] @cypher(statement:"""
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)<-[*..3]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        RETURN ss.study_subject_id AS subject_id,
               f.file_name AS file_name,
               f.file_type AS file_type,
               head(labels(parent)) AS association,
               f.file_description AS file_description,
               f.file_format AS file_format,
               f.file_size AS file_size,
               f.file_id AS file_id,
               f.md5sum AS md5sum
    """)

    programInfo: [ProgramInfo] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)
        OPTIONAL MATCH (s)<--(ss:study_subject)
        RETURN p.program_acronym AS program_acronym,
               p.program_id AS program_id,
               p.program_name AS program_name,
               p.start_date AS start_date,
               p.end_date AS end_date,
               p.pubmed_id AS pubmed_id,
               COUNT(DISTINCT s) AS num_studies,
               COUNT(DISTINCT ss) AS num_subjects
    """)
    programDetail(program_id: String):  ProgramDetail @cypher(statement: """
        MATCH (p:program {program_id: $program_id})
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
        OPTIONAL MATCH (ss)<-[sp:sample_of_study_subject]-()<-[:file_of_sample]-(f)
        WITH p,
            count(DISTINCT f) AS num_files,
            count(DISTINCT sp) AS num_samples,
            count(DISTINCT ss) AS num_subjects,
            collect(DISTINCT ss.disease_subtype) AS disease_subtypes
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:file_of_study]-(fs)
        WITH p, count(DISTINCT fs) + num_files AS num_files,
            num_samples, num_subjects, disease_subtypes
        MATCH (p)<-[:study_of_program]-(s)<-[:study_subject_of_study]-(ss)
        WITH s {.study_type, .study_acronym, .study_name, .study_full_description, num_subjects:count(DISTINCT ss),study_info: s.study_acronym + ': ' + s.study_short_description} AS study,
            p, num_files, num_subjects, disease_subtypes, num_samples
        OPTIONAL MATCH (p)-->(ins:institution)
        OPTIONAL MATCH (p)<-[:laboratory_procedure_of_program]-(lp)
        WITH study, p, num_files, num_subjects, disease_subtypes, num_samples, ins, lp
        MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
        WITH p, ss.disease_subtype as group, count(*) as subjects, study, num_files, num_subjects, disease_subtypes, num_samples, ins, lp
        WITH p, COLLECT ({group: group, subjects:  subjects}) AS diagnoses, study, num_files, num_subjects, disease_subtypes, num_samples, ins, lp
        RETURN  p.program_acronym AS program_acronym,
            p.program_id AS program_id,
            p.program_name AS program_name,
            p.program_full_description AS program_full_description,
            ins.institution_name AS institution_name,
            p.program_external_url AS program_external_url,
            num_subjects,
            num_files,
            COUNT (DISTINCT lp) as num_lab_procedures,
            num_samples,
            disease_subtypes,
            collect(DISTINCT study) AS studies,
            diagnoses
    """, passThrough:true)

    subjectDetail(subject_id: String): SubjectDetail @cypher(statement:  """
        MATCH (ss:study_subject {study_subject_id: $subject_id})
        OPTIONAL MATCH (ss)-->(s:study)
        OPTIONAL MATCH (s)-->(p:program)
        OPTIONAL MATCH (ss)<-[*..3]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        WITH p, s, ss, collect(f {subject_id:ss.study_subject_id, .file_name, .file_type,
            association:head(labels(parent)), .file_description, .file_format, .file_size, .file_id, .md5sum}) AS files
        OPTIONAL MATCH (ss)<--(demo:demographic_data)
        OPTIONAL MATCH (ss)<--(diag:diagnosis)
        OPTIONAL MATCH (diag)<--(pr:therapeutic_procedure)
        OPTIONAL MATCH (ss)<--(fu:follow_up)
        OPTIONAL MATCH (ss)<--(samp:sample)
        OPTIONAL MATCH (ss)<--()-->(lp:laboratory_procedure)
        RETURN ss.study_subject_id AS subject_id,
               p.program_acronym AS program_acronym,
               p.program_id AS program_id,
               s.study_acronym AS study_acronym,
               s.study_name AS study_name,
               demo.gender AS gender,
               demo.race AS race,
               demo.ethnicity AS ethnicity,
               demo.age_at_index AS age_at_index,
               demo.menopause_status AS menopause_status,
               demo.vital_status AS vital_status,
               demo.cause_of_death AS cause_of_death,
               ss.disease_type AS disease_type,
               ss.disease_subtype AS disease_subtype,
               diag.tumor_grade AS tumor_grade,
               diag.tumor_largest_dimension_diameter AS tumor_largest_dimension_diameter,
               diag.er_status AS er_status,
               diag.pr_status AS pr_status,
               diag.nuclear_grade AS nuclear_grade,
               diag.recurrence_score AS recurrence_score,
               pr.primary_surgical_procedure AS primary_surgical_procedure,
               pr.chemotherapy_regimen_group AS chemotherapy_regimen_group,
               pr.chemotherapy_regimen AS chemotherapy_regimen,
               pr.endocrine_therapy_type AS endocrine_therapy_type,
               fu.dfs_event_indicator AS dfs_event_indicator,
               fu.recurrence_free_indicator AS recurrence_free_indicator,
               fu.distant_recurrence_indicator AS distant_recurrence_indicator,
               fu.dfs_event_type AS dfs_event_type,
               fu.first_recurrence_type AS first_recurrence_type,
               fu.days_to_progression AS days_to_progression,
               fu.days_to_recurrence AS days_to_recurrence,
               lp.test_name AS test_name,
               files,
               COLLECT(DISTINCT samp) AS samples,
               COUNT(DISTINCT samp) AS num_samples,
               COUNT(DISTINCT lp) AS num_lab_procedures
    """, passThrough: true)

    armDetail(study_acronym: String): ArmDetail @cypher(statement:  """
        MATCH (s:study {study_acronym: $study_acronym})<-[:study_subject_of_study]-(ss)
        WITH s, ss.disease_subtype AS group, COUNT(DISTINCT ss) AS subjects
        WITH s, COLLECT ({group: group, subjects:  subjects}) AS diagnoses
        OPTIONAL MATCH (s)<-[:file_of_study]-(f)
        WITH s, diagnoses, COLLECT(DISTINCT f {.file_name, .file_type, .file_description, .file_format, .file_size, .file_id, .md5sum, association: "study"}) AS files
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-()<-[:sample_of_study_subject]-()<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH s, diagnoses, files, COUNT(DISTINCT f) + size(files) AS num_files, COUNT(DISTINCT lp) AS num_lab_procedures
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-(ss)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)
        RETURN s.study_acronym AS study_acronym,
               s.study_name AS study_name,
               s.study_type AS study_type,
               s.study_full_description AS study_full_description,
               s.study_acronym + ': ' + s.study_short_description AS study_info,
               COUNT(DISTINCT ss) AS num_subjects,
               COUNT(DISTINCT sp) AS num_samples,
               num_lab_procedures,
               num_files,
               diagnoses,
               files
    """, passThrough: true)

    samplesForSubjectId(subject_id: String!): [sample] @cypher(statement: "MATCH (ss:study_subject {study_subject_id: $subject_id})<-[*]-(s:sample) RETURN s")

    filesInList(file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            f, parent, ss, s
        RETURN
            f.file_name AS file_name,
            f.file_id AS file_id,
            f.file_type AS file_type,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            f.md5sum AS md5sum,
            ss.study_subject_id AS subject_id,
            s.study_acronym AS study_code
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN file_id_num
            WHEN 'file_name' THEN file_name
            WHEN 'file_type' THEN file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'md5sum' THEN md5sum
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'study_code' THEN study_code
            ELSE file_id_num END
        SKIP $offset
        LIMIT $first
    """)

    filesInListDesc(file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            f, parent, ss, s
        RETURN
            f.file_name AS file_name,
            f.file_id AS file_id,
            f.file_type AS file_type,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            f.md5sum AS md5sum,
            ss.study_subject_id AS subject_id,
            s.study_acronym AS study_code
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN file_id_num
            WHEN 'file_name' THEN file_name
            WHEN 'file_type' THEN file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'md5sum' THEN md5sum
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'study_code' THEN study_code
            ELSE file_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)

    sampleOverview(subject_ids: [String], sample_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [SampleOverview] @cypher(statement: """
        MATCH (samp:sample)
          WHERE ($sample_ids IS NULL OR samp.sample_id IN $sample_ids)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p
          WHERE ($subject_ids IS NULL OR ss.study_subject_id IN $subject_ids)
        RETURN
            samp.sample_id AS sample_id,
            ss.study_subject_id AS subject_id,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.disease_subtype AS diagnosis,
            samp.tissue_type AS tissue_type,
            samp.composition AS tissue_composition,
            samp.sample_anatomic_site AS sample_anatomic_site,
            samp.method_of_sample_procurement AS sample_procurement_method,
            lp.test_name AS platform,
            files,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'sample_id' THEN sample_id
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'tissue_type' THEN tissue_type
            WHEN 'tissue_composition' THEN tissue_composition
            WHEN 'sample_anatomic_site' THEN sample_anatomic_site
            WHEN 'sample_procurement_method' THEN sample_procurement_method
            WHEN 'platform' THEN platform
            ELSE subject_id_num END
        SKIP $offset
        LIMIT $first
    """)

    sampleOverviewDesc(subject_ids: [String], sample_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [SampleOverview] @cypher(statement: """
        MATCH (samp:sample)
          WHERE ($sample_ids IS NULL OR samp.sample_id IN $sample_ids)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p
          WHERE ($subject_ids IS NULL OR ss.study_subject_id IN $subject_ids)
        RETURN
            samp.sample_id AS sample_id,
            ss.study_subject_id AS subject_id,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.disease_subtype AS diagnosis,
            samp.tissue_type AS tissue_type,
            samp.composition AS tissue_composition,
            samp.sample_anatomic_site AS sample_anatomic_site,
            samp.method_of_sample_procurement AS sample_procurement_method,
            lp.test_name AS platform,
            files,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'sample_id' THEN sample_id
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'tissue_type' THEN tissue_type
            WHEN 'tissue_composition' THEN tissue_composition
            WHEN 'sample_anatomic_site' THEN sample_anatomic_site
            WHEN 'sample_procurement_method' THEN sample_procurement_method
            WHEN 'platform' THEN platform
            ELSE subject_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)


    fileOverview(subject_ids: [String], file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileOverview] @cypher(statement: """
        MATCH (f:file)
          WHERE ($file_ids IS NULL OR f.file_id IN $file_ids)
        MATCH (f)-->(parent)
          WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[:file_of_sample]->(samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (f)-[:file_of_study]->(s1)-[:study_of_program]-(p1)
        WITH
            ss.study_subject_id AS subject_id, toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            f, ss, p, parent, s, samp, s1, p1
          WHERE ($subject_ids IS NULL OR subject_id IN $subject_ids)
        RETURN
            f.file_id AS file_id,
            f.file_name AS file_name,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            CASE p WHEN null THEN p1.program_acronym ELSE p.program_acronym END AS program,
            CASE s WHEN null THEN s1.study_acronym ELSE s.study_acronym END AS arm,
            ss.study_subject_id AS subject_id,
            samp.sample_id AS sample_id,
            ss.disease_subtype AS diagnosis,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'file_id' THEN file_id
            WHEN 'file_name' THEN file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'sample_id' THEN sample_id
            WHEN 'diagnosis' THEN diagnosis
            ELSE file_name END
        SKIP $offset
        LIMIT $first
    """)

    fileOverviewDesc(subject_ids: [String], file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileOverview] @cypher(statement: """
        MATCH (f:file)
          WHERE ($file_ids IS NULL OR f.file_id IN $file_ids)
        MATCH (f)-->(parent)
          WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[:file_of_sample]->(samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (f)-[:file_of_study]->(s1)-[:study_of_program]-(p1)
        WITH
            ss.study_subject_id AS subject_id, toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            f, ss, p, parent, s, samp, s1, p1
          WHERE ($subject_ids IS NULL OR subject_id IN $subject_ids)
        RETURN
            f.file_id AS file_id,
            f.file_name AS file_name,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            CASE p WHEN null THEN p1.program_acronym ELSE p.program_acronym END AS program,
            CASE s WHEN null THEN s1.study_acronym ELSE s.study_acronym END AS arm,
            ss.study_subject_id AS subject_id,
            samp.sample_id AS sample_id,
            ss.disease_subtype AS diagnosis,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'file_id' THEN file_id
            WHEN 'file_name' THEN file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'sample_id' THEN sample_id
            WHEN 'diagnosis' THEN diagnosis
            ELSE file_name END DESC
        SKIP $offset
        LIMIT $first
    """)

    fileIdsFromFileName(file_name: [String], offset: Int = 0, first: Int = 10000000, order_by: String ="file_name"): [FileOverview] @cypher(statement: """
        MATCH (f:file)
        WHERE ($file_name IS NULL OR f.file_name IN $file_name)
        RETURN
            f.file_name as file_name,
            f.file_id as file_id
        ORDER BY CASE $order_by
            WHEN 'file_name' THEN file_name
            WHEN 'file_id' THEN file_id
            ELSE file_name END
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    fileIdsFromFileNameDesc(file_name: [String], offset: Int = 0, first: Int = 10000000, order_by: String ="file_name"): [FileOverview] @cypher(statement: """
        MATCH (f:file)
        WHERE ($file_name IS NULL OR f.file_name IN $file_name)
        RETURN
            f.file_name as file_name,
            f.file_id as file_id
        ORDER BY CASE $order_by
            WHEN 'file_name' THEN file_name
            WHEN 'file_id' THEN file_id
            ELSE file_name END DESC
        SKIP $offset
        LIMIT $first
    """, passThrough: true)


    subjectList: [GroupList] @cypher(statement: """
        MATCH (ss:study_subject)
        RETURN
            "all" as group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByProgram: [GroupList] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)<--(ss:study_subject)
        RETURN
            "program:"+p.program_acronym AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByStudy: [GroupList] @cypher(statement: """
        MATCH (s:study)
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-(ss:study_subject)
        RETURN
            "study:"+s.study_acronym + ': ' + s.study_short_description AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByDiagnoses: [GroupList] @cypher(statement: """
        MATCH (ss:study_subject)
        RETURN
            "diagnosis:"+ss.disease_subtype AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByRecurrenceScore: [GroupList] @cypher(statement: """
        MATCH (g:stratification_factor)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "recurrence score:"+g.grouped_recurrence_score AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByTumorSize: [GroupList] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "tumor size:"+g.tumor_size_group AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByTumorGrade: [GroupList] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "tumor grade:"+g.tumor_grade AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByErStatus: [GroupList] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "er status:"+g.er_status AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByPrStatus: [GroupList] @cypher(statement: """
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "pr status:"+g.pr_status AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByChemotherapyRegimen: [GroupList] @cypher(statement: """
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        RETURN
            "chemotherapy regimen:"+g.chemotherapy_regimen AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByEndocrineTherapy: [GroupList] @cypher(statement: """
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        RETURN
            "endocrine therapy:"+g.endocrine_therapy_type AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByMenopauseStatus: [GroupList] @cypher(statement: """
        MATCH (g:demographic_data)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "menopause status:"+g.menopause_status AS group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByTissueType: [GroupList] @cypher(statement: """
        MATCH (g:sample)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "tissue type:"+g.tissue_type as group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByTissueComposition: [GroupList] @cypher(statement: """
        MATCH (g:sample)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        RETURN
            "sample:"+g.composition as group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByFileAssociation: [GroupList] @cypher(statement: """
        MATCH (g:file)
        OPTIONAL MATCH (g)-->(parent)-->(ss:study_subject)
        RETURN
            "file association:"+head(labels(parent)) as group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

    subjectListByFileType: [GroupList] @cypher(statement: """
        MATCH (g:file)
        OPTIONAL MATCH (g)-->(parent)-->(ss:study_subject)
        RETURN
            "file type:"+g.file_type as group,
            collect(DISTINCT ss.study_subject_id) as subjects
    """)

}
